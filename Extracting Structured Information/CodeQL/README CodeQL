# Phase 1: Extracting Structured Information from Code Using Static Analysis Tools

## Overview

This project is part of an internship focused on leveraging **static analysis tools** to extract structured metadata from source code. The aim of **Phase 1** is to analyze open-source repositories and extract semantic information that can help build a rich context for **Large Language Models (LLMs)**.

During this phase, **CodeQL** was used to analyze Python codebases and extract information such as:

* Class and module hierarchies
* Method definitions and signatures
* Variable types and scopes
* Inter-function dependencies and call graphs

This structured information lays the groundwork for creating an intelligent code understanding pipeline.

---

## Why CodeQL?

Before selecting CodeQL, a survey of popular static analysis tools was conducted, considering:

* **Functionality** and depth of analysis
* **Ease of use** and learning curve
* **Cross-language support**
* **Automation and scalability**

CodeQL stood out due to its ability to model code as a relational database and query it using a variant of SQL. This makes it ideal for extracting customized and complex semantic information.

---

## Usage

This project includes a batch script to automate the process of cloning a GitHub repository, creating a CodeQL database, analyzing it, and converting the output to a more readable format.

### Prerequisites

* [CodeQL CLI](https://codeql.github.com/docs/codeql-cli/)
* [Git](https://git-scm.com/)
* [jq](https://stedolan.github.io/jq/) (for JSON processing)
* Windows OS (or adaptation needed for Unix-based systems)

### Steps

1. Clone the GitHub repository
2. Create a CodeQL database
3. Run the analysis
4. Convert the output to JSON

### Script: `analyze.bat`

```batch
@echo off
REM Usage: analyze.bat [GitHub Repo URL]
...
```

### Example

```bash
analyze.bat https://github.com/astropy/astropy
```

Upon successful execution, the results will be saved as:

* SARIF format: `resultats_astropy.sarif`
* JSON format: `resultats_astropy.json`

---

## Output

The SARIF and JSON outputs include detailed metadata such as:

* Code locations of vulnerabilities or design patterns
* File paths, line numbers, and snippet information
* Class and function definitions
* Module dependencies

These outputs can be parsed for further processing, visualization, or integration with LLM pipelines.



